/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 5.6.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGSigMFFileInputReport.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace SWGSDRangel {

SWGSigMFFileInputReport::SWGSigMFFileInputReport(QString* json) {
    init();
    this->fromJson(*json);
}

SWGSigMFFileInputReport::SWGSigMFFileInputReport() {
    sample_size = 0;
    m_sample_size_isSet = false;
    sample_bytes = 0;
    m_sample_bytes_isSet = false;
    crc_status = 0;
    m_crc_status_isSet = false;
    total_bytes_status = 0;
    m_total_bytes_status_isSet = false;
    center_frequency = 0;
    m_center_frequency_isSet = false;
    sample_rate = 0;
    m_sample_rate_isSet = false;
    track_nunber = 0;
    m_track_nunber_isSet = false;
    absolute_time = nullptr;
    m_absolute_time_isSet = false;
    elapsed_record_time = nullptr;
    m_elapsed_record_time_isSet = false;
    elapsed_trackime = nullptr;
    m_elapsed_trackime_isSet = false;
    record_duration = nullptr;
    m_record_duration_isSet = false;
    track_duration = nullptr;
    m_track_duration_isSet = false;
}

SWGSigMFFileInputReport::~SWGSigMFFileInputReport() {
    this->cleanup();
}

void
SWGSigMFFileInputReport::init() {
    sample_size = 0;
    m_sample_size_isSet = false;
    sample_bytes = 0;
    m_sample_bytes_isSet = false;
    crc_status = 0;
    m_crc_status_isSet = false;
    total_bytes_status = 0;
    m_total_bytes_status_isSet = false;
    center_frequency = 0;
    m_center_frequency_isSet = false;
    sample_rate = 0;
    m_sample_rate_isSet = false;
    track_nunber = 0;
    m_track_nunber_isSet = false;
    absolute_time = new QString("");
    m_absolute_time_isSet = false;
    elapsed_record_time = new QString("");
    m_elapsed_record_time_isSet = false;
    elapsed_trackime = new QString("");
    m_elapsed_trackime_isSet = false;
    record_duration = new QString("");
    m_record_duration_isSet = false;
    track_duration = new QString("");
    m_track_duration_isSet = false;
}

void
SWGSigMFFileInputReport::cleanup() {







    if(absolute_time != nullptr) { 
        delete absolute_time;
    }
    if(elapsed_record_time != nullptr) { 
        delete elapsed_record_time;
    }
    if(elapsed_trackime != nullptr) { 
        delete elapsed_trackime;
    }
    if(record_duration != nullptr) { 
        delete record_duration;
    }
    if(track_duration != nullptr) { 
        delete track_duration;
    }
}

SWGSigMFFileInputReport*
SWGSigMFFileInputReport::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGSigMFFileInputReport::fromJsonObject(QJsonObject &pJson) {
    ::SWGSDRangel::setValue(&sample_size, pJson["sampleSize"], "qint32", "");
    
    ::SWGSDRangel::setValue(&sample_bytes, pJson["sampleBytes"], "qint32", "");
    
    ::SWGSDRangel::setValue(&crc_status, pJson["crcStatus"], "qint32", "");
    
    ::SWGSDRangel::setValue(&total_bytes_status, pJson["totalBytesStatus"], "qint32", "");
    
    ::SWGSDRangel::setValue(&center_frequency, pJson["centerFrequency"], "qint32", "");
    
    ::SWGSDRangel::setValue(&sample_rate, pJson["sampleRate"], "qint32", "");
    
    ::SWGSDRangel::setValue(&track_nunber, pJson["trackNunber"], "qint32", "");
    
    ::SWGSDRangel::setValue(&absolute_time, pJson["absoluteTime"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&elapsed_record_time, pJson["elapsedRecordTime"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&elapsed_trackime, pJson["elapsedTrackime"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&record_duration, pJson["recordDuration"], "QString", "QString");
    
    ::SWGSDRangel::setValue(&track_duration, pJson["trackDuration"], "QString", "QString");
    
}

QString
SWGSigMFFileInputReport::asJson ()
{
    QJsonObject* obj = this->asJsonObject();

    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    delete obj;
    return QString(bytes);
}

QJsonObject*
SWGSigMFFileInputReport::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    if(m_sample_size_isSet){
        obj->insert("sampleSize", QJsonValue(sample_size));
    }
    if(m_sample_bytes_isSet){
        obj->insert("sampleBytes", QJsonValue(sample_bytes));
    }
    if(m_crc_status_isSet){
        obj->insert("crcStatus", QJsonValue(crc_status));
    }
    if(m_total_bytes_status_isSet){
        obj->insert("totalBytesStatus", QJsonValue(total_bytes_status));
    }
    if(m_center_frequency_isSet){
        obj->insert("centerFrequency", QJsonValue(center_frequency));
    }
    if(m_sample_rate_isSet){
        obj->insert("sampleRate", QJsonValue(sample_rate));
    }
    if(m_track_nunber_isSet){
        obj->insert("trackNunber", QJsonValue(track_nunber));
    }
    if(absolute_time != nullptr && *absolute_time != QString("")){
        toJsonValue(QString("absoluteTime"), absolute_time, obj, QString("QString"));
    }
    if(elapsed_record_time != nullptr && *elapsed_record_time != QString("")){
        toJsonValue(QString("elapsedRecordTime"), elapsed_record_time, obj, QString("QString"));
    }
    if(elapsed_trackime != nullptr && *elapsed_trackime != QString("")){
        toJsonValue(QString("elapsedTrackime"), elapsed_trackime, obj, QString("QString"));
    }
    if(record_duration != nullptr && *record_duration != QString("")){
        toJsonValue(QString("recordDuration"), record_duration, obj, QString("QString"));
    }
    if(track_duration != nullptr && *track_duration != QString("")){
        toJsonValue(QString("trackDuration"), track_duration, obj, QString("QString"));
    }

    return obj;
}

qint32
SWGSigMFFileInputReport::getSampleSize() {
    return sample_size;
}
void
SWGSigMFFileInputReport::setSampleSize(qint32 sample_size) {
    this->sample_size = sample_size;
    this->m_sample_size_isSet = true;
}

qint32
SWGSigMFFileInputReport::getSampleBytes() {
    return sample_bytes;
}
void
SWGSigMFFileInputReport::setSampleBytes(qint32 sample_bytes) {
    this->sample_bytes = sample_bytes;
    this->m_sample_bytes_isSet = true;
}

qint32
SWGSigMFFileInputReport::getCrcStatus() {
    return crc_status;
}
void
SWGSigMFFileInputReport::setCrcStatus(qint32 crc_status) {
    this->crc_status = crc_status;
    this->m_crc_status_isSet = true;
}

qint32
SWGSigMFFileInputReport::getTotalBytesStatus() {
    return total_bytes_status;
}
void
SWGSigMFFileInputReport::setTotalBytesStatus(qint32 total_bytes_status) {
    this->total_bytes_status = total_bytes_status;
    this->m_total_bytes_status_isSet = true;
}

qint32
SWGSigMFFileInputReport::getCenterFrequency() {
    return center_frequency;
}
void
SWGSigMFFileInputReport::setCenterFrequency(qint32 center_frequency) {
    this->center_frequency = center_frequency;
    this->m_center_frequency_isSet = true;
}

qint32
SWGSigMFFileInputReport::getSampleRate() {
    return sample_rate;
}
void
SWGSigMFFileInputReport::setSampleRate(qint32 sample_rate) {
    this->sample_rate = sample_rate;
    this->m_sample_rate_isSet = true;
}

qint32
SWGSigMFFileInputReport::getTrackNunber() {
    return track_nunber;
}
void
SWGSigMFFileInputReport::setTrackNunber(qint32 track_nunber) {
    this->track_nunber = track_nunber;
    this->m_track_nunber_isSet = true;
}

QString*
SWGSigMFFileInputReport::getAbsoluteTime() {
    return absolute_time;
}
void
SWGSigMFFileInputReport::setAbsoluteTime(QString* absolute_time) {
    this->absolute_time = absolute_time;
    this->m_absolute_time_isSet = true;
}

QString*
SWGSigMFFileInputReport::getElapsedRecordTime() {
    return elapsed_record_time;
}
void
SWGSigMFFileInputReport::setElapsedRecordTime(QString* elapsed_record_time) {
    this->elapsed_record_time = elapsed_record_time;
    this->m_elapsed_record_time_isSet = true;
}

QString*
SWGSigMFFileInputReport::getElapsedTrackime() {
    return elapsed_trackime;
}
void
SWGSigMFFileInputReport::setElapsedTrackime(QString* elapsed_trackime) {
    this->elapsed_trackime = elapsed_trackime;
    this->m_elapsed_trackime_isSet = true;
}

QString*
SWGSigMFFileInputReport::getRecordDuration() {
    return record_duration;
}
void
SWGSigMFFileInputReport::setRecordDuration(QString* record_duration) {
    this->record_duration = record_duration;
    this->m_record_duration_isSet = true;
}

QString*
SWGSigMFFileInputReport::getTrackDuration() {
    return track_duration;
}
void
SWGSigMFFileInputReport::setTrackDuration(QString* track_duration) {
    this->track_duration = track_duration;
    this->m_track_duration_isSet = true;
}


bool
SWGSigMFFileInputReport::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_sample_size_isSet){
            isObjectUpdated = true; break;
        }
        if(m_sample_bytes_isSet){
            isObjectUpdated = true; break;
        }
        if(m_crc_status_isSet){
            isObjectUpdated = true; break;
        }
        if(m_total_bytes_status_isSet){
            isObjectUpdated = true; break;
        }
        if(m_center_frequency_isSet){
            isObjectUpdated = true; break;
        }
        if(m_sample_rate_isSet){
            isObjectUpdated = true; break;
        }
        if(m_track_nunber_isSet){
            isObjectUpdated = true; break;
        }
        if(absolute_time && *absolute_time != QString("")){
            isObjectUpdated = true; break;
        }
        if(elapsed_record_time && *elapsed_record_time != QString("")){
            isObjectUpdated = true; break;
        }
        if(elapsed_trackime && *elapsed_trackime != QString("")){
            isObjectUpdated = true; break;
        }
        if(record_duration && *record_duration != QString("")){
            isObjectUpdated = true; break;
        }
        if(track_duration && *track_duration != QString("")){
            isObjectUpdated = true; break;
        }
    }while(false);
    return isObjectUpdated;
}
}

