/**
 * SDRangel
 * This is the web REST/JSON API of SDRangel SDR software. SDRangel is an Open Source Qt5/OpenGL 3.0+ (4.3+ in Windows) GUI and server Software Defined Radio and signal analyzer in software. It supports Airspy, BladeRF, HackRF, LimeSDR, PlutoSDR, RTL-SDR, SDRplay RSP1 and FunCube    ---   Limitations and specifcities:    * In SDRangel GUI the first Rx device set cannot be deleted. Conversely the server starts with no device sets and its number of device sets can be reduced to zero by as many calls as necessary to /sdrangel/deviceset with DELETE method.   * Preset import and export from/to file is a server only feature.   * Device set focus is a GUI only feature.   * The following channels are not implemented (status 501 is returned): ATV and DATV demodulators, Channel Analyzer NG, LoRa demodulator   * The device settings and report structures contains only the sub-structure corresponding to the device type. The DeviceSettings and DeviceReport structures documented here shows all of them but only one will be or should be present at a time   * The channel settings and report structures contains only the sub-structure corresponding to the channel type. The ChannelSettings and ChannelReport structures documented here shows all of them but only one will be or should be present at a time    --- 
 *
 * OpenAPI spec version: 5.6.0
 * Contact: f4exb06@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGSigMFFileInputReport.h
 *
 * SigMFFileInput
 */

#ifndef SWGSigMFFileInputReport_H_
#define SWGSigMFFileInputReport_H_

#include <QJsonObject>


#include <QString>

#include "SWGObject.h"
#include "export.h"

namespace SWGSDRangel {

class SWG_API SWGSigMFFileInputReport: public SWGObject {
public:
    SWGSigMFFileInputReport();
    SWGSigMFFileInputReport(QString* json);
    virtual ~SWGSigMFFileInputReport();
    void init();
    void cleanup();

    virtual QString asJson () override;
    virtual QJsonObject* asJsonObject() override;
    virtual void fromJsonObject(QJsonObject &json) override;
    virtual SWGSigMFFileInputReport* fromJson(QString &jsonString) override;

    qint32 getSampleSize();
    void setSampleSize(qint32 sample_size);

    qint32 getSampleBytes();
    void setSampleBytes(qint32 sample_bytes);

    qint32 getCrcStatus();
    void setCrcStatus(qint32 crc_status);

    qint32 getTotalBytesStatus();
    void setTotalBytesStatus(qint32 total_bytes_status);

    qint32 getCenterFrequency();
    void setCenterFrequency(qint32 center_frequency);

    qint32 getSampleRate();
    void setSampleRate(qint32 sample_rate);

    qint32 getTrackNunber();
    void setTrackNunber(qint32 track_nunber);

    QString* getAbsoluteTime();
    void setAbsoluteTime(QString* absolute_time);

    QString* getElapsedRecordTime();
    void setElapsedRecordTime(QString* elapsed_record_time);

    QString* getElapsedTrackime();
    void setElapsedTrackime(QString* elapsed_trackime);

    QString* getRecordDuration();
    void setRecordDuration(QString* record_duration);

    QString* getTrackDuration();
    void setTrackDuration(QString* track_duration);


    virtual bool isSet() override;

private:
    qint32 sample_size;
    bool m_sample_size_isSet;

    qint32 sample_bytes;
    bool m_sample_bytes_isSet;

    qint32 crc_status;
    bool m_crc_status_isSet;

    qint32 total_bytes_status;
    bool m_total_bytes_status_isSet;

    qint32 center_frequency;
    bool m_center_frequency_isSet;

    qint32 sample_rate;
    bool m_sample_rate_isSet;

    qint32 track_nunber;
    bool m_track_nunber_isSet;

    QString* absolute_time;
    bool m_absolute_time_isSet;

    QString* elapsed_record_time;
    bool m_elapsed_record_time_isSet;

    QString* elapsed_trackime;
    bool m_elapsed_trackime_isSet;

    QString* record_duration;
    bool m_record_duration_isSet;

    QString* track_duration;
    bool m_track_duration_isSet;

};

}

#endif /* SWGSigMFFileInputReport_H_ */
